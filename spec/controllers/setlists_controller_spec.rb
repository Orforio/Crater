require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.	If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.	There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.	Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SetlistsController, type: :controller do

	# This should return the minimal set of attributes required to create a valid
	# Setlist. As you add validations to Setlist, be sure to
	# adjust the attributes here as well.
	let(:valid_attributes) { { title: "Mixed Compilation 1" } }
	let(:invalid_attributes) { { title: "", edit_key: "123456" } }
	
	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# SetlistsController. Be sure to keep this updated too.
	let(:valid_session) { {} }

	describe "GET #index" do
		xit "assigns all setlists as @setlists" do
			setlist = Setlist.create! valid_attributes
			get :index, {}, valid_session
			expect(assigns(:setlists)).to eq([setlist])
		end
	end

	describe "GET #show" do
		xit "assigns the requested setlist as @setlist" do
			setlist = Setlist.create! valid_attributes
			get :show, {:id => setlist.to_param}, valid_session
			expect(assigns(:setlist)).to eq(setlist)
		end
	end

	describe "GET #new" do
		it "assigns a new setlist as @setlist" do
			get :new, {}, valid_session
			expect(assigns(:setlist)).to be_a_new(Setlist)
		end
	end

	describe "GET #edit" do
		xit "assigns the requested setlist as @setlist" do
			setlist = Setlist.create! valid_attributes
			get :edit, {:id => setlist.to_param}, valid_session
			expect(assigns(:setlist)).to eq(setlist)
		end
	end

	describe "POST #create" do
		context "with valid params" do
			it "creates a new Setlist" do
				expect {
					post :create, { setlist: valid_attributes }, valid_session
				}.to change(Setlist, :count).by(1)
			end

			it "assigns a newly created setlist as @setlist" do
				post :create, { setlist: valid_attributes }, valid_session
				expect(assigns(:setlist)).to be_a(Setlist)
				expect(assigns(:setlist)).to be_persisted
			end

			it "redirects to the created setlist" do
				post :create, { setlist: valid_attributes }, valid_session
				expect(response).to redirect_to(Setlist.last)
			end
		end

		context "with invalid params" do
			it "assigns a newly created but unsaved setlist as @setlist" do
				post :create, { setlist: invalid_attributes }, valid_session
				expect(assigns(:setlist)).to be_a_new(Setlist)
			end

			it "re-renders the 'new' template" do
				post :create, { setlist: invalid_attributes }, valid_session
				expect(response).to render_template("new")
			end
		end
	end

	describe "PUT #update" do
		context "with valid params" do
			let(:new_attributes) {
				skip("Add a hash of attributes valid for your model")
			}

			xit "updates the requested setlist" do
				setlist = Setlist.create! valid_attributes
				put :update, {:id => setlist.to_param, :setlist => new_attributes}, valid_session
				setlist.reload
				skip("Add assertions for updated state")
			end

			xit "assigns the requested setlist as @setlist" do
				setlist = Setlist.create! valid_attributes
				put :update, {:id => setlist.to_param, :setlist => valid_attributes}, valid_session
				expect(assigns(:setlist)).to eq(setlist)
			end

			xit "redirects to the setlist" do
				setlist = Setlist.create! valid_attributes
				put :update, {:id => setlist.to_param, :setlist => valid_attributes}, valid_session
				expect(response).to redirect_to(setlist)
			end
		end

		context "with invalid params" do
			xit "assigns the setlist as @setlist" do
				setlist = Setlist.create! valid_attributes
				put :update, {:id => setlist.to_param, :setlist => invalid_attributes}, valid_session
				expect(assigns(:setlist)).to eq(setlist)
			end

			xit "re-renders the 'edit' template" do
				setlist = Setlist.create! valid_attributes
				put :update, {:id => setlist.to_param, :setlist => invalid_attributes}, valid_session
				expect(response).to render_template("edit")
			end
		end
	end

	describe "DELETE #destroy" do
		xit "destroys the requested setlist" do
			setlist = Setlist.create! valid_attributes
			expect {
				delete :destroy, {:id => setlist.to_param}, valid_session
			}.to change(Setlist, :count).by(-1)
		end

		xit "redirects to the setlists list" do
			setlist = Setlist.create! valid_attributes
			delete :destroy, {:id => setlist.to_param}, valid_session
			expect(response).to redirect_to(setlists_url)
		end
	end

end
